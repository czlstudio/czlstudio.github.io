[{"title":"左侧小标题","path":"/2022/12/09/TodoList案例笔记/","content":"#### - 案例 知识点\n\n\n## 组件之间传递数据\n\n- 子组件 ---> 父组件\n\n  ```Vue\n  // -- 父组件 --//\n  // 父组件准备一个可以传参的函数\n  // 通过组件标签 v-bind:[函数] 绑定数据\n  <HelloWorld :message='message' />\n  methods: {\n  \t// 接收\n  \tmessage(msg) {\n  \t\tconsole.log(msg)\t// hello\n  \t},\n  },\n\n  ---\n\n  // -- 子组件 --//\n  // 设置 props 定义需要接收的参数\n  props: ['message'],\n  // 设置完 props 之后, 可以直接在 methods 使用 receive 传递过来的数据了\n  methods: {\n  \tthis.message('hello') // 传递参数\n  },\n  ```\n\n- 父组件 --> 子组件\n\n  ```vue\n  // -- 父组件 -- // // 引入子组件 // 可以使用 data 中的数据 也可以直接传入数据\n  <HelloWorld :msg=\"HelloWorld\" />\n\n  --- // -- 子组件 -- // // 设置 props 定义需要接收的参数 props: ['msg'],\n  <h2>{{ msg }}</h2>\n  //\n  <h2>HelloWorld</h2>\n  ```","tags":["前端","Vue"],"categories":["前端","Vue"]},{"title":"Vue进阶用法","path":"/2022/12/09/Vue进阶用法/","content":"# Vue 基础入门\n\n---\n\n- ## 基本框架\n\n```vue\nconst app = createApp({ // data 数据 data() { return { // 数据存放位置 } }, // computed 计算属性 computed: { // 方法 }, // methods 方法 (函数) methods: { //\n方法 }, // watch 数据监听 watch: { // 方法名与监听数据的属性名一致 } }).mount('#app')\n```\n\n- ## 总结\n\n  1. 初始化 Vue 项目,本地引入/CDN。\n  2. 调用 Vue.createApp() 创建应用,在调用 mount() 挂载到 HTML 元素上。\n  3. Vue 配置对象可定义 data, 并使用 v-bind 或 \":\" 绑定 数据到模板。\n  4. data 数据是响应式的,模板会根据 data 数据的变化而变化。\n  5. 展示列表数据. 根据条件展示数据。\n  6. Vue 事件处理,使用 v-on 或 @ 绑定事件监听。\n  7. 使用 methods 定义函数。\n  8. 定义计算属性. 监听器。\n  9. 计算数属性. 监听器. methods 的区别。\n  10. 处理表单及 v-model 双向绑定。\n  11. 绑定数据到 style 和 class 中。"},{"title":"Vue基础入门","path":"/2022/12/09/Vue基础入门/","content":"# Vue 进阶用法\n\n- ## 指令\n\n#### 1.v-html: 在模板中输出原始的 HTML 代码\n\n```vue\ndata() { return { p: `\n<p>这是一段<span style='color: red;'>HTML</span>代码</p>\n} }\n<p v-html=\"p\"></p>\n```\n\n---\n\n#### 2.v-once: 只读取一次 data 数据\n\n```vue\ndata() { return { count: 0 } }\n<p v-once>初始数字: {{ count }}</p>\n<p>当前: {{ count }}</p>\n<button @click=\"count += 1\">增加</button>\n```\n\n---\n\n#### 3.给 v-bind 和 v-on 设置动态参数\n\n```vue\ndata() {\n\treturn {\n\t\tattr: \"placeholder\",\n\t\tvalue: \"请输入一些字符\",\n\t\tevent: \"change\"\n    },\n},\nmethods: {\n    handleChange() {\n        console.log(\"input 变化\")\n    }\n}\n\n<input type=\"text\" :[attr]=\"value\" @[event]=\"handleChange\">\n```\n\n---\n\n#### 4.再看 v-for 指令\n\n```vue\ndata() { return { blogPost: { title: \"Vue 3.x 完全指南\", author: \"小明\", pubDate: \"2021-12-12\", }, todos: [ {id:1, content: \"代办1\"}, {id:2, content: \"代办2\"},\n{id:3, content: \"代办3\"}, ], }, },\n<ul>\n    <li v-for=\"(value, name, index) in blogPost\">{{ index }}, {{ name }} - {{ value}}</li>\n</ul>\n\n<ul>\n    <li v-for=\"todo in todos\" :key=\"todo.id\">{{ todo.content }}</li>\n</ul>\n\n<ul>\n    <li v-for=\"n in 5\">{{ n }}</li>\n</ul>\n```\n\n---\n\n#### 5.`<template/>` 渲染一组标签但不额外增加嵌套\n\n```vue\n<template v-for=\"todo in todos\">\n  <p>{{ todo.id }}</p>\n  <p>{{ todo.content }}</p>\n</template>\n```\n\n---\n\n#### 6.事件传参与多事件处理函数\n\n```vue\ndata() { return { todos: [ {id:1, content: \"代办1\"}, {id:2, content: \"代办2\"}, {id:3, content: \"代办3\"}, ], }, }, methods: { handleClick(id, e) { console.log(id\n+ ', ' + e.clientX + ', ' + e.clientY) }, showContent(content) { console.log(content) } }\n\n<ul>\n    <li v-for=\"todo in todos\"\n        :key=\"todo.id\"\n        @click=\"handleClick(todo.id, $event), \n                showContent(todo.content)\"\n        >\n    \t{{ todo.content }}\n    </li>\n</ul>\n```\n\n- 小结\n\n  1.@click=\"handleClick(msg)\"\n\n  2.@click=\"handleClick(mag, $event)\"\n\n  3.@click=\"handleClick1(), handleClick2()\"\n\n---\n\n#### 7.事件相关的修饰符\n\n```vue\n<form @click.prevent=\"handleSubmit\"></form>\n\n<a href=\"http://bilibili.com/\" @click.prevent>\n    不会跳转\n</a>\n```\n\n- 事件修饰符 可以组合使用 ( @click.once.prevent )\n  1. .stop // event.stopPropagation() 停止冒泡。\n  2. .capture // 捕获事件,现在该元素中处理,之后交给子元素处理,与事件冒泡相反。\n  3. .self // 只处理发生在本元素上的事件。\n  4. .once // 事件只处理一次\n\n---\n\n#### 8.处理键盘、鼠标事件的修饰符\n\n```vue\n<button @keyup.enter=\"handleButtonClick\">\n    按钮\n</button>\n```\n\n- 按键修饰符 ( @keyup.page-down )\n\n  1. .enter // 回车键\n  2. .tab // tab 制表符\n  3. .delete // 退格键\n  4. .esc // ESC 键\n  5. .up // 上键\n  6. down // 下键\n  7. .left // 左键\n  8. .right // 右键\n\n     - [更多键盘修饰符](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n\n- 常见组合键修饰符\n\n  1. .ctrl // ctrl 键\n  2. .alt // alt 键\n  3. .shift // shift 键\n  4. .meta // Windows: win 键\n\n- 精确组合键\n\n```vue\n<button @keyup.ctrl.enter.exact=\"handleButtonClick\">\n   按钮\n</button>\n```\n\n- 鼠标修饰符 ( @mousedown.left=\"handleMouseClick\" )\n  1. .left // 鼠标左键\n  2. .middle // 鼠标中键, 或鼠标滚轮按下时\n  3. .right // 鼠标右键\n\n---\n\n#### 9.表单输入相关的修饰符 ( v-model )\n\n```vue\ndata() {\n\treturn {\n\t\tusername: ''\n    },\n}\n\n<input type=\"text\" v-model.lazy=\"username\">\n<input type=\"text\" v-model.number=\"year\">\n<input type=\"text\" v-model.trim=\"username\">\n```\n\n​ 1. .lazy // 失去焦点才获取数据 -> @change\n\n​ 2. .number // 获取数字数据\n\n​ 3. .trim // 去除头 尾空格\n\n---\n\n#### 10.通过 Vue 实例访问和修改应用的配置\n\n- 小结\n  1. 实例可以直接访问 data 属性\n  2. 也可以通过 $data 访问\n  3. 还可以访问计算属性，方法\n  4. 能添加监听\n  5. 适合传网站和 Vue 相结合的场景\n\n---\n\n#### 11.生命周期：在合适的时机为应用添加数据和行为\n\n##### - 生命周期钩子\n\n| 1.beforeCreate | 2.created | 3.beforeMount   | 4.mounted   |\n| -------------- | --------- | --------------- | ----------- |\n| 5.beforeUpdate | 6.update  | 7.beforeUnmount | 8.unmounted |\n\n---\n\n### 12.本章小结\n\n1. 模板部分\n\n   - v-html 渲染原始 html\n   - v-once 只渲染一次模板\n   - v-for 深入了解\n   - `<template>`标签渲染一组元素, 不增加额外嵌套\n\n2. 事件部分\n   - 给事件处理函数传递参数\n   - 同一个事件添加多个处理函数\n   - 事件,表单,键盘和鼠标事件相关修饰符\n3. 其他\n   - 直接操作 Vue 实例对象\n   - 生命周期钩子"},{"title":"关于","path":"/about/index.html","content":"### HelloWorld"},{"title":"笔记","path":"/notes/index.html","content":"### HelloWorld"},{"title":"工具","path":"/tools/index.html","content":"### HelloWorld"}]